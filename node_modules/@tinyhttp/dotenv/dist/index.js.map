{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\nimport { DotenvParseOptions, DotenvParseOutput, DotenvConfigOptions, DotenvConfigOutput } from './structs.js'\n\nconst log = (message: string) => console.log(`[dotenv][DEBUG] ${message}`)\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n/**\n * Parses a string or buffer in the .env file format into an object.\n *\n * @param src - contents to be parsed\n * @param options - additional options\n * @returns an object with keys and values based on `src`\n */\nexport function parse(src: string | Buffer, options?: DotenvParseOptions): DotenvParseOutput {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src\n    .toString()\n    .split(NEWLINES_MATCH)\n    .forEach((line: string, idx: number) => {\n      // matching \"KEY' and 'VAL' in 'KEY=VAL'\n      const keyValueArr = line.match(RE_INI_KEY_VAL)\n      // matched?\n      if (keyValueArr != null) {\n        const key = keyValueArr[1]\n        // default undefined or missing values to empty string\n        let val = keyValueArr[2] || ''\n        const end = val.length - 1\n        const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n        const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n        // if single or double quoted, remove quotes\n        if (isSingleQuoted || isDoubleQuoted) {\n          val = val.substring(1, end)\n\n          // if double quoted, expand newlines\n          if (isDoubleQuoted) {\n            val = val.replace(RE_NEWLINES, NEWLINE)\n          }\n        } else {\n          // remove surrounding whitespace\n          val = val.trim()\n        }\n\n        obj[key] = val\n      } else if (debug) {\n        log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n      }\n    })\n\n  return obj\n}\n\n/**\n * Loads `.env` file contents into {@link https://nodejs.org/api/process.html#process_process_env | `process.env`}.\n * Example: 'KEY=value' becomes { parsed: { KEY: 'value' } }\n *\n * @param options - controls behavior\n * @returns an object with a `parsed` key if successful or `error` key if an error occurred\n *\n */\nexport function config(options?: Partial<DotenvConfigOptions>): DotenvConfigOutput {\n  const dotenvPath = options?.path || path.resolve(process.cwd(), '.env')\n  const encoding = options?.encoding || 'utf8'\n  const debug = options?.debug || false\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    for (const key of Object.keys(parsed)) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    }\n\n    return { parsed }\n  } catch (error) {\n    return { error }\n  }\n}\n"],"names":[],"mappings":";;AAIA,MAAM,MAAM,CAAC,YAAoB,QAAQ,IAAI,mBAAmB,OAAO,EAAE;AAEzE,MAAM,UAAU;AAChB,MAAM,iBAAiB;AACvB,MAAM,cAAc;AACpB,MAAM,iBAAiB;AASP,SAAA,MAAM,KAAsB,SAAiD;AAC3F,QAAM,QAAQ,QAAQ,WAAW,QAAQ,KAAK;AAC9C,QAAM,MAAM,CAAA;AAIT,MAAA,WACA,MAAM,cAAc,EACpB,QAAQ,CAAC,MAAc,QAAgB;AAEhC,UAAA,cAAc,KAAK,MAAM,cAAc;AAE7C,QAAI,eAAe,MAAM;AACjB,YAAA,MAAM,YAAY,CAAC;AAErB,UAAA,MAAM,YAAY,CAAC,KAAK;AACtB,YAAA,MAAM,IAAI,SAAS;AACzB,YAAM,iBAAiB,IAAI,CAAC,MAAM,OAAO,IAAI,GAAG,MAAM;AACtD,YAAM,iBAAiB,IAAI,CAAC,MAAM,OAAO,IAAI,GAAG,MAAM;AAGtD,UAAI,kBAAkB,gBAAgB;AAC9B,cAAA,IAAI,UAAU,GAAG,GAAG;AAG1B,YAAI,gBAAgB;AACZ,gBAAA,IAAI,QAAQ,aAAa,OAAO;AAAA,QACxC;AAAA,MAAA,OACK;AAEL,cAAM,IAAI;MACZ;AAEA,UAAI,GAAG,IAAI;AAAA,eACF,OAAO;AAChB,UAAI,iDAAiD,MAAM,CAAC,KAAK,IAAI,EAAE;AAAA,IACzE;AAAA,EAAA,CACD;AAEI,SAAA;AACT;AAUO,SAAS,OAAO,SAA4D;AAC3E,QAAA,cAAa,mCAAS,SAAQ,KAAK,QAAQ,QAAQ,OAAO,MAAM;AAChE,QAAA,YAAW,mCAAS,aAAY;AAChC,QAAA,SAAQ,mCAAS,UAAS;AAE5B,MAAA;AAEI,UAAA,SAAS,MAAM,GAAG,aAAa,YAAY,EAAE,UAAU,GAAG,EAAE,MAAA,CAAO;AAEzE,eAAW,OAAO,OAAO,KAAK,MAAM,GAAG;AACjC,UAAA,CAAC,OAAO,UAAU,eAAe,KAAK,QAAQ,KAAK,GAAG,GAAG;AAC3D,gBAAQ,IAAI,GAAG,IAAI,OAAO,GAAG;AAAA,iBACpB,OAAO;AACZ,YAAA,IAAI,GAAG,qEAAqE;AAAA,MAClF;AAAA,IACF;AAEA,WAAO,EAAE,OAAO;AAAA,WACT,OAAO;AACd,WAAO,EAAE,MAAM;AAAA,EACjB;AACF;"}